[
    {
        "id": 358,
        "task_id": 2490,
        "test_case_id": 3,
        "question": "In the Kingdom of AtCoder, only banknotes are used as currency. There are 10^{100}+1 kinds of banknotes, with the values of 1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}. You have come shopping at a mall and are now buying a takoyaki machine with a value of N. (Takoyaki is the name of a Japanese snack.)\nTo make the payment, you will choose some amount of money which is at least N and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus N.\nWhat will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?\nAssume that you have sufficient numbers of banknotes, and so does the clerk.\n\n-----Constraints-----\n - N is an integer between 1 and 10^{1,000,000} (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the minimum possible number of total banknotes used by you and the clerk.\n\n-----Sample Input-----\n36\n\n-----Sample Output-----\n8\n\nIf you give four banknotes of value 10 each, and the clerk gives you back four banknotes of value 1 each, a total of eight banknotes are used.\nThe payment cannot be made with less than eight banknotes in total, so the answer is 8.",
        "solutions": "[\"s=input()\\ndp0=[0]*(len(s)+1)\\ndp1=[0]*(len(s)+1)\\ndp1[0]=1\\nfor i in range(1,len(s)+1):\\n  n=int(s[i-1:i])\\n  dp0[i]=min(dp0[i-1]+n,dp1[i-1]+10-n)\\n  dp1[i]=min(dp0[i-1]+(1 if n+1==10 else n+1),dp1[i-1]+10-n-1)\\nprint(dp0[-1])\", \"N = input()\\ndp = [[0]*2 for _ in range(1001000)]\\ndp[0][1] = 1\\nfor i in range(len(N)):\\n    d = int(N[i])\\n    dp[i+1][0] = min(dp[i][0] + d, dp[i][1] + 10-d)\\n    dp[i+1][1] = min(dp[i][0] + d + 1, dp[i][1] + 10-d-1)  # \\u3082\\u3089\\u3044\\u3059\\u304e\\u3066\\u3044\\u308b\\u72b6\\u614b\\u3092\\u7dad\\u6301\\u3059\\u308b\\nans = dp[len(N)][0]\\nprint(ans)\\n\", \"p, q = 0, 1\\nfor x in map(int, input()):\\n    p, q = min(p + x, q + 10 - x), min(p + x + 1, q + 9 - x)\\nprint(p)\\n\", \"S=input()[::-1]\\nans=0\\n#\\u652f\\u6255\\u3046\\u679a\\u6570\\narray = list(map(int, S))\\nL=len(array)\\nfor i,n in enumerate(array):\\n    if n< 5 :\\n        ans+=n\\n    elif n > 5:\\n        ans+= 10-n\\n        if i <L-1:\\n            array[i+1] +=1\\n        else:\\n            ans +=1\\n    else:\\n        ans+=5\\n        if i < L-1:\\n            if array[i+1] >=5:\\n                array[i+1] +=1\\n                \\nprint( ans)\\n\", \"import sys\\n\\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    N = input()\\n    count = 0\\n\\n    S = len(N)\\n    flag = 0\\n    for i in range(S):\\n        temp = flag + int(N[-1 - i])\\n        if temp > 5:\\n            count += 10 - temp\\n            flag = 1\\n        elif temp ==5  and i !=S-1 and int(N[-1-i-1])>=5:\\n            count+=temp\\n            flag=1\\n\\n        else:\\n            count += temp\\n            flag = 0\\n\\n    print((count + flag))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n=input()\\nk=len(n)\\ndp=[[0]*2 for _ in range(k)]\\ndp[0][0]=min(int(n[0]),11-int(n[0]))\\ndp[0][1]=min(int(n[0])+1,11-(int(n[0])+1))\\nfor i in range(1,k):\\n  dig=int(n[i])\\n  dp[i][0]=min(dp[i-1][0]+dig,dp[i-1][1]+10-dig)\\n  dp[i][1]=min(dp[i-1][0]+dig+1,dp[i-1][1]+10-(dig+1))\\nprint(dp[k-1][0])\", \"S = input()\\nL = len(S)\\n\\ndp = [[0 for _ in range(L + 1)] for over in range(2)]\\ndp[0][0] = 0\\ndp[1][0] = 1\\n\\nfor j, s in enumerate(S, 1):\\n    n = int(s)\\n    dp[0][j] = min(dp[0][j - 1] + n, dp[1][j - 1] + (10 - n))\\n    dp[1][j] = min(dp[0][j - 1] + (n + 1), dp[1][j - 1] + (10 - n - 1))\\n    \\nprint(dp[0][-1])\", \"N=input()\\nN=N[::-1]+\\\"0\\\"\\nans=0\\nup=0\\nfor i,n in enumerate(N):\\n  d=int(n)+up\\n  if d>5 or (d==5 and i<len(N)-1 and int(N[i+1])>=5):\\n    ans+=(10-d)\\n    up=1\\n  else:\\n    ans+=d\\n    up=0\\nprint(ans)\", \"def solve():\\n    N = input()\\n    \\n    INF = 10 ** 32\\n    \\n    dp = [[INF, INF] for i in range(len(N) + 1)]\\n    dp[0][0] = 0\\n    \\n    for i, x in enumerate(int(n) for n in N[::-1]):\\n        ni = i + 1\\n        dp[ni][0] = min(dp[i][0] + x, dp[i][1] + x)\\n        dp[ni][1] = min(dp[i][0] + 11 - x, dp[i][1] + 9 - x)\\n    \\n    ans = min(dp[-1])\\n    \\n    print(ans)\\n\\nsolve()\", \"def main():\\n    S = list( map( int, list( input())))\\n    N = len(S)\\n    dp = [[0,0] for _ in range(N+1)]\\n    dp[0][1] = 2\\n    for i in range(N):\\n        s = S[i]\\n        dp[i+1][0] = min(dp[i][0] + s, dp[i][1]+s)\\n        dp[i+1][1] = min(dp[i][0] + 11-s, dp[i][1]+9-s)\\n        # dp[i+1][2] = min(dp[i][1], dp[i][2])+9-s\\n        # 11-s\\u306f\\u3001\\u8ffd\\u52a0\\u3067\\u652f\\u6255\\u3046\\u3082\\u306e\\u3068\\u3001\\u304a\\u91e3\\u308a\\n        # 9-s\\u306f\\u3001\\u8ffd\\u52a0\\u306f\\u3059\\u3067\\u306b\\u652f\\u6255\\u308f\\u308c\\u3066\\u3044\\u3066\\u3001\\u7e70\\u308a\\u4e0b\\u304c\\u308a\\u304c\\u8d77\\u3053\\u3063\\u3066\\u3044\\u308b\\n    print(( min(dp[N][0], dp[N][1])))\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N = [int(_) for _ in list(input())]\\na, b = 0, 1\\nfor n in N:\\n    a, b = min(a + n, b + 10 - n), min(a + (n + 1), b + 10 - (n + 1))\\nprint(a)\\n\", \"n = [int(i) for i in list(input())]\\na, b = 0, 1\\nfor i in n:\\n    a, b = min(a+i, b+10-i), min(a+(i+1), b+10-(i+1))\\nprint(a)\\n\", \"INF = float(\\\"inf\\\")\\n\\ndef main():\\n\\tn = list(map(int, list(input())))\\n\\tn.reverse()\\n\\t# print(n)\\n\\tn.append(0)\\n\\tN = len(n) - 1\\n\\tDP = [[INF, INF] for i in range(N + 2)]\\n\\tDP[-1][1] = 0\\n\\tfor i in range(N + 1):\\n\\t\\tDP[i][0] = min(DP[i - 1][0] + (9 - n[i]), DP[i - 1][1] + (10 - n[i]))\\n\\t\\tDP[i][1] = min(DP[i - 1][0] + n[i] + 1, DP[i - 1][1] + n[i])\\n\\n\\tans = min(DP[-2])\\n\\t# print(DP)\\n\\tprint(ans)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\", \"N = input()\\n\\ndp0 = 0  \\ndp1 = 1  \\n \\nfor n in N:\\n    n = int(n)\\n    dp0_new = min(dp0 + n, dp1 + (10 - n))\\n    n = n + 1 #\\u7e70\\u308a\\u4e0a\\u3052\\u3055\\u305b\\u3066\\u308b\\n    dp1_new = min(dp0 + n, dp1 + (10 - n))\\n    dp0, dp1 = dp0_new, dp1_new\\n\\nprint(dp0)\", \"N = input()\\ndp = [[0]*2 for _ in range(1001000)]\\ndp[0][1] = 1\\nfor i in range(len(N)):\\n    d = int(N[i])\\n    dp[i+1][0] = min(dp[i][0] + d, dp[i][1] + 10-d)\\n    dp[i+1][1] = min(dp[i][0] + d + 1, dp[i][1] + 10-d-1)  # \\u3082\\u3089\\u3044\\u3059\\u304e\\u3066\\u3044\\u308b\\u72b6\\u614b\\u3092\\u7dad\\u6301\\u3059\\u308b\\nans = dp[len(N)][0]\\nprint(ans)\\n\", \"n = list(map(int, list(input())))\\nln = len(n)\\nans = 0\\nfor i in range(-1, -ln, -1):\\n    if n[i] == 10:\\n        n[i-1] += 1\\n        continue\\n    elif n[i] < 5:\\n        ans += n[i]\\n    elif n[i] > 5:\\n        ans += 10 - n[i]\\n        n[i-1] += 1\\n    else:\\n        if n[i-1] < 5:\\n            ans += 5\\n        else:\\n            ans += 5\\n            n[i-1] += 1\\nif n[0] == 10:\\n    ans += 1\\nelif n[0] <= 5:\\n    ans += n[0]\\nelse:\\n    ans += 11 - n[0]\\n\\nprint(ans)\", \"S = input()\\nL = len(S)\\n\\nINF = float('inf')\\ndp = [[INF]*(L+1) for _ in range(2)]\\ndp[0][0] = 0\\n\\nfor i in range(L):\\n    d = int(S[-1-i])\\n    dp[0][i+1] = min(dp[0][i], dp[1][i]) + d\\n    dp[1][i+1] = min(dp[0][i] + 10-d+1, dp[1][i] + 10-d-1)\\n\\nprint(min(dp[0][-1], dp[1][-1]))\", \"N = [int(s) for s in input()]\\nM = len(N)\\n\\neq = 0\\nov = 1\\n\\nfor n in N:\\n    a = min(eq + n, ov + 10 - n)\\n    b = min(eq + (n + 1), ov + 10 - (n + 1))\\n    eq, ov = a, b\\n\\nprint(eq)\\n\", \"n = str(input())\\nn_list = list(reversed(n))\\nn_list.append('0')\\nsum = 0\\nkuriagari = False\\nfor i in range(len(n_list)):\\n    num = int(n_list[i])\\n    if(kuriagari):\\n        num+=1\\n        kuriagari=False\\n    \\n    if(num==10):\\n        num=0\\n        kuriagari=True\\n\\n    if(num<5):\\n        sum+=num\\n    else:\\n        if(num>5):\\n            sum+=10-num\\n            kuriagari=True\\n        else:\\n            sum+=5\\n            if(int(n_list[i+1])>=5):\\n                kuriagari=True\\n\\nprint(sum)\\n\\n\\n\", \"\\ndef resolve():\\n    S = input()\\n    n = len(S)\\n    dp = [[0] * 2 for _ in range(n + 1)]\\n    dp[0][1] = 1\\n    for i in range(1, n + 1):\\n        d = int(S[i - 1])\\n        dp[i][0] = min(dp[i - 1][0] + d, dp[i - 1][1] + (10 - d))\\n        dp[i][1] = min(dp[i - 1][0] + (d + 1), dp[i - 1][1] + (10 - 1 - d))\\n    print((dp[n][0]))\\n\\n\\ndef __starting_point():\\n    resolve()\\n\\n__starting_point()\", \"def main():\\n    import sys\\n    input = sys.stdin.readline\\n\\n    N = list(map(int, list(input()[:-1])))\\n    N = N[::-1] + [0]\\n\\n    ans = 0\\n    for i in range(len(N)-1):\\n        if N[i] < 5:\\n            ans += N[i]\\n        elif N[i] > 5:\\n            ans += 10 - N[i]\\n            N[i+1] += 1\\n        else:\\n            ans += 5\\n            if N[i+1] >= 5:\\n                N[i+1] += 1\\n\\n    print(ans + N[len(N)-1])\\n\\nmain()\", \"def solve(N):\\n    N = [0] + N\\n    k = 0  # \\u7e70\\u308a\\u4e0a\\u304c\\u308a\\n    ans = 0\\n    for d, d_next in zip(N[::-1], N[-2::-1]):\\n        d += k\\n        if d <= 4 or (d==5 and d_next<5):\\n            k = 0\\n            ans += d\\n        else:\\n            k = 1\\n            ans += 10 - d\\n    if k:\\n        ans += 1\\n    return ans\\n\\ndef test(N, ans):\\n    for i in range(N, 10000):\\n        rem = i - N\\n        if sum(map(int, str(i))) + sum(map(int, str(rem))) < ans:\\n            print(f\\\"!!! N={N}, ans={ans}, trueans={i, rem}\\\")\\ndef main():\\n    N = list(map(int, input()))\\n    print((solve(N)))\\n    # for i in range(1, 10000):\\n    #     ans = solve(list(map(int, str(i))))\\n    #     test(i, ans)\\nmain()\\n\", \"N=input()\\ninf=float(\\\"inf\\\")\\ndp=[[inf]*(len(N)+1) for i in range(2)]\\ndp[0][0]=0\\nfor i in range(len(N)):\\n   tmp=int(N[-1-i])\\n   dp[0][i+1]=min(dp[0][i],dp[1][i])+tmp\\n   dp[1][i+1]=min(dp[0][i]+11,dp[1][i]+9)-tmp\\nprint(min(dp[0][-1],dp[1][-1]))\", \"S = input()\\njust, over = 0, 1\\nfor c in S:\\n    c = int(c)\\n    just, over = [\\n        min(just + c, over + (10-c)),\\n        min(just + (c+1), over + (9-c))\\n    ]\\nprint(just)\\n\", \"digits = input()\\ndigits = list(map(int, digits[::-1]))\\ndigits.append(0)\\n\\nans = 0\\nfor i in range(len(digits)):\\n    if digits[i] < 5:\\n        ans += digits[i]\\n    elif digits[i] == 5:\\n        if digits[i + 1] < 5:\\n            ans += digits[i]\\n        else:\\n            digits[i + 1] += 1\\n            ans += 10 - digits[i]\\n    else:\\n        # digits[i] > 5\\n        digits[i + 1] += 1\\n        ans += 10 - digits[i]\\n\\nprint(ans)\\n\", \"N = list(map(int, input()))\\n\\n# print(N)\\nans = 0\\nDP = [0] *2\\nDP[0] = 0\\nDP[1] = 1\\nfor i in N:\\n    a, b = DP[0] ,DP[1]\\n    DP[0] = a + i if a+i < b +(10-i) else b +(10-i)\\n    DP[1] = a + i+1 if a + i+1 < b + (9-i) else b + (9-i)\\n\\n    # print(DP)\\n\\nprint(DP[0] if DP[0] <= DP[1]+1 else DP[1] +1)\", \"n = \\\"0\\\" + input() # \\u6587\\u5b57\\u5217\\u3068\\u3057\\u3066\\u53d7\\u3051\\u53d6\\u308a\\nN = len(n)\\nplus = 1\\njust = 0\\nfor i in range(1,N):\\n    #\\u524d\\u306e\\u6841\\u304cplus\\u3060\\u3063\\u305f\\u5834\\u5408\\u306e\\u6700\\u4f4e\\u679a\\u6570\\u3092\\u8a08\\u7b97\\u3059\\u308b\\n    plus_plus = plus+10-(int(n[i])+1)#\\u3053\\u306e\\u6841\\u3082\\uff11\\u679a\\u591a\\u304f\\u6255\\u3046\\n    plus_just = plus+10-int(n[i])#\\u3053\\u306e\\u6841\\u306f\\u3061\\u3087\\u3046\\u3069\\u6255\\u3046\\n    #\\u524d\\u306e\\u6841\\u306f\\u3061\\u3087\\u3046\\u3069\\u6255\\u3063\\u3066\\u3044\\u305f\\u5834\\u5408\\n    just_plus = just+1+int(n[i])#\\u3053\\u306e\\u6841\\u306f\\uff11\\u679a\\u591a\\u304f\\u6255\\u3046\\n    just_just = just+int(n[i])#\\u3053\\u306e\\u6841\\u3082\\u3061\\u3087\\u3046\\u3069\\u6255\\u3046\\n    \\n    plus = min(plus_plus,just_plus)\\n    just = min(just_just,plus_just)\\n\\n#\\u6700\\u5f8c\\u306e\\u6841\\u306f1\\u679a\\u4f59\\u5206\\u306b\\u6255\\u3046\\u5fc5\\u8981\\u304c\\u306a\\u3044\\nprint(just)\", \"n=[int(x) for x in list(input()[::-1])]+[0]\\nans = 0\\nstep = 0\\nfor i in range(len(n)-1):\\n  x = n[i]+step\\n  if x < 5 or (x==5 and n[i+1]<5):\\n    ans += x\\n    step = 0\\n  else:\\n    ans += 10 - x\\n    step = 1\\nprint(ans+step)\", \"N = input()[::-1]\\nl = len(N)\\ndp = [[0,0] for i in range(l+1)]\\n\\nfor i in range(l):\\n    dp[i+1][0] = min(dp[i][0] + int(N[i]), dp[i][1] + int(N[i]) + 1)\\n    if i == 0:\\n        dp[i+1][1] = 10 - int(N[i])\\n    else:\\n        dp[i+1][1] = min(dp[i][0] + 10 - int(N[i]), dp[i][1] + 9 - int(N[i]))\\n\\nprint((min(dp[-1][0],dp[-1][1]+1)))\\n\", \"#!/usr/bin python3\\n# -*- coding: utf-8 -*-\\n\\nN = list(map(int, list(input())))\\nN.reverse()\\nN=N+[0]\\ncnt = 0\\nfor i in range(len(N)):\\n    n=N[i]\\n    if n<5:\\n        cnt+=n\\n    elif n==5:\\n        cnt+=n\\n        if N[i+1]>=5:\\n            N[i+1]+=1\\n    else:\\n        cnt+=10-n\\n        N[i+1]+=1\\nprint(cnt)\\n\", \"s = input()\\nn = len(s)\\n\\nans = 0\\ndp1 = [0]*(n+1)\\ndp0 = [0]*(n+1)\\n\\ndp1[0] = 1\\n\\nfor i in range(n):\\n  k = int(s[i])\\n  if k < 5:\\n    dp0[i+1] = dp0[i] + k\\n  elif k > 5:\\n    dp0[i+1] = dp1[i] + 10-k\\n  else:\\n    if i == 0:\\n      dp0[i+1] = dp0[i] + k\\n    elif int(s[i-1]) < 5:\\n      dp0[i+1] = dp0[i] + k\\n    else:\\n      dp0[i+1] = dp1[i] + 10-k\\n  k += 1\\n  if k == 10:\\n    dp1[i+1] = dp1[i]\\n  elif k < 5:\\n    dp1[i+1] = dp0[i] + k\\n  elif k > 5:\\n    dp1[i+1] = dp1[i] + 10-k\\n  else:\\n    if i == 0:\\n      dp1[i+1] = dp0[i] + k\\n    elif int(s[i-1]) < 5:\\n      dp1[i+1] = dp0[i] + k\\n    else:\\n      dp1[i+1] = dp1[i] + 10-k\\n\\nprint(dp0[n])\", \"n = input().rstrip()\\n\\ntotal = 0\\ncarry = 0\\nfor i in range(len(n)-1, -1, -1):\\n    v = int(n[i]) + carry\\n    if v > 5:\\n        total += 10 - v\\n        carry = 1\\n    elif v == 5:\\n        if i == 0:\\n            total += 5\\n            carry = 0\\n        else:\\n            if int(n[i-1]) >= 5:\\n                total += 5\\n                carry = 1\\n            else:\\n                total += 5\\n                carry = 0\\n    else:\\n        total += v\\n        carry = 0\\n\\nprint(total + carry)\", \"import sys\\n\\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    N = list(map(int,input()))\\n    count = 0\\n\\n    S = len(N)\\n    flag = 0\\n    for i in range(S):\\n        temp = flag + N[-1 - i]\\n        if temp > 5:\\n            count += 10 - temp\\n            flag = 1\\n        elif temp ==5  and i !=S-1 and N[-1-i-1]>=5:\\n            count+=temp\\n            flag=1\\n\\n        else:\\n            count += temp\\n            flag = 0\\n\\n    print((count + flag))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    n = input()\\n    a, b = 0, 1\\n    for i in n:\\n        x = int(i)\\n        a, b = min(a + x, b + 10 - x), min(a + x + 1, b + 10 - x - 1)\\n    print(a)\\n\\nmain()\\n\", \"s = input()[::-1]\\nsize = len(s)\\ns += \\\"4\\\"\\n\\nans = 0\\nbef = 0\\n\\nfor i in range(size):\\n    v1 = int(s[i])\\n    v2 = int(s[i+1])\\n    if v1+bef>=6 or (v1+bef>=5 and v2>=5):\\n        ans += 10-(v1+bef)\\n        bef = 1\\n    else:\\n        ans += (v1+bef)\\n        bef = 0\\n\\nans += bef\\nprint(ans)\", \"N = [0] + list(map(int, list(input())))\\nL = len(N)\\nans = 0\\nfor i in range(L-1, -1, -1):\\n    if N[i] == 10:\\n        if i == 0:\\n            ans += 1\\n        else:\\n            N[i-1] += 1\\n            N[i] = 0\\n    if N[i] < 5:\\n        ans += N[i]\\n    elif N[i] > 5:\\n        ans += 10 - N[i]\\n        N[i-1] += 1\\n    else:\\n        if i == 0:\\n            ans += N[i]\\n        else:\\n            if N[i-1] >= 5:\\n                N[i-1] += 1\\n                ans += 5\\n            else:\\n                ans += N[i]\\n\\nprint(ans)\\n\", \"def main():\\n    N = list(map(int, list(input())))\\n    N = N[::-1] + [0]\\n\\n    ans = 0\\n    for i in range(len(N)-1):\\n        if N[i] < 5:\\n            ans += N[i]\\n        elif N[i] > 5:\\n            ans += 10 - N[i]\\n            N[i+1] += 1\\n        else:\\n            ans += 5\\n            if N[i+1] >= 5:\\n                N[i+1] += 1\\n\\n    print(ans + N[len(N)-1])\\n\\nmain()\", \"def main():\\n    n=list(map(int,list(input())[::-1]))+[0]\\n    nl=len(n)\\n    ans=0\\n    for i in range(nl-1):\\n        if n[i]>=6 or (n[i]==5 and n[i+1]>=5):\\n            n[i]=10-n[i]\\n            n[i+1]+=1\\n    print(sum(n))\\n      \\ndef __starting_point():\\n    main()\\n__starting_point()\", \"def main():\\n    s = input().rstrip()\\n    s = \\\"0\\\" + s\\n    dp = [0, float(\\\"inf\\\")]\\n    for c in s:\\n        x = int(c)\\n        dp = [min(dp[0] + x, dp[1] + (10-x)), min(dp[0] + x+1, dp[1] + (10-x) - 1)]\\n    print((dp[0]))\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"s = '0' + input()\\nm = len(s)\\nup = 0\\ncnt = 0\\ny = []\\nfor i in range(-1, -m-1, -1):\\n    cs = int(s[i]) + up\\n    if cs < 5 or (cs == 5 and int(s[i-1]) < 5):\\n        cnt += cs\\n        y.append([cs, s[i]])\\n        up = 0\\n    else:\\n        cnt += 10 - cs\\n        y.append([10 - cs, s[i]])\\n        up = 1\\n        \\nprint(cnt)\", \"# https://atcoder.jp/contests/abc155/submissions/10157837\\n# \\u5199\\u7d4c\\n\\ndef main():\\n    a = [0]\\n    a += list(map(int, input()))\\n    a.reverse()\\n\\n    n = len(a)\\n    b = a.copy()\\n\\n    for i in range(n):\\n        if b[i] > 5 or (b[i] == 5 and b[i + 1] >= 5):\\n            b[i] = 0\\n            b[i + 1] += 1\\n\\n    cnt = sum(b)\\n    for i in range(n):\\n        if a[i] > b[i]:\\n            b[i] += 10\\n            b[i + 1] -= 1\\n        cnt += b[i] - a[i]\\n    print(cnt)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"# coding: utf-8\\n\\n\\ndef solve(*args: str) -> str:\\n    N = list(map(int, args[0]))\\n\\n    a, b = 0, 1\\n    for n in N:\\n        a, b = min(b+(10-n), a+n), min(b+(9-n), a+n+1)\\n    return str(a)\\n\\n\\ndef __starting_point():\\n    print((solve(*(open(0).read().splitlines()))))\\n\\n__starting_point()\", \"n = input()\\nx = len(n)\\ninf = 10 ** 9\\n#dp[i][flg]...i\\u6841\\u76ee\\u307e\\u3067\\u3001\\u672a\\u6e80\\u30d5\\u30e9\\u30b0=1\\ndp = [[inf] * 2 for _ in range(x+1)]\\ndp[0][0] = 0\\ndp[0][1] = 1\\nfor i in range(x):\\n    s = int(n[i])\\n    dp[i+1][0] = min(dp[i][0] + s, dp[i][1] + 10 - s)\\n    dp[i+1][1] = min(dp[i][0] + s + 1, dp[i][1] + 9 - s)\\n\\nprint((dp[x][0]))\\n\", \"n='0'+input()\\n\\nX=[]\\nfor i in range(len(n)):\\n    X.append(int(n[i]))\\ncnt=0\\ni=len(n)-1\\nwhile i>=0:\\n    if X[i]>5:\\n        cnt+=10-X[i]\\n        X[i-1]+=1\\n        \\n    elif X[i]==5:\\n        cnt+=5\\n        if X[i-1]>=5:\\n            X[i-1]+=1\\n    else:\\n        cnt+=X[i]\\n    i-=1\\nprint(cnt)\\n\", \"N = list(map(int, list(input())))[::-1]\\nL = len(N)\\n\\nanswer = 0\\nfor i, n in enumerate(N):\\n    if n < 5:\\n        answer += n\\n    elif n > 5:\\n        answer += 10 - n\\n        if i < L - 1:\\n            N[i + 1] += 1\\n        else:\\n            answer += 1\\n    else:\\n        answer += 5\\n        if i < L - 1:\\n            if N[i + 1] >= 5:\\n                N[i + 1] += 1\\n\\nprint(answer)\", \"N = list(input())\\n\\nnum = 0\\nans = 0\\nfor i in range(len(N)-1, -1, -1):\\n    n = int(N[i])\\n    if n+num == 5 and i > 0 and int(N[i-1]) >= 5:\\n        ans += 5\\n        num = 1\\n    elif n+num < 6:\\n        ans += n+num\\n        num = 0\\n    else:\\n        ans += 10-(n+num)\\n        num = 1\\n\\nans += num\\nprint(ans)\", \"N = list(map(int, input()))\\n\\nans = 0\\ncarry = 0   #0 or 1 or 2. when 2, it means that it's optional between 0 and 1.\\nfor i in range(len(N) - 1, -1, -1):\\n    if carry == 2:\\n        if N[i] >= 5:\\n            digit = N[i] + 1\\n            carry = 1\\n            ans += (10 - digit)\\n        else:\\n            digit = N[i]\\n            carry = 0\\n            ans += digit\\n    else:\\n        digit = N[i] + carry\\n        if digit >= 6:\\n            carry = 1\\n            ans += (10 - digit)\\n        elif digit <= 4:\\n            carry = 0\\n            ans += digit\\n        else:\\n            carry = 2\\n            ans += digit\\n        \\n\\nif carry == 1:\\n    ans += carry\\n\\nprint(ans)\", \"def main():\\n    *e, = list(map(int, input()))\\n    e.reverse()\\n\\n    inf = 20 * len(e)\\n\\n    dp = [0, inf]  # \\u7e70\\u308a\\u4e0b\\u304c\\u308a\\u7121,\\u6709\\n\\n    for x in e:\\n        ndp = [-1, -1]  # \\u7e70\\u308a\\u4e0b\\u304c\\u308a\\u7121,\\u6709\\n\\n        ndp[0] = min(\\n            dp[0] + x,\\n            dp[1] + ((x + 1) if x < 9 else inf)  # \\u3061\\u3087\\u3046\\u3069\\u652f\\u6255\\u3048\\u306a\\u3044\\u306e\\u3067inf\\n        )  # \\u3061\\u3087\\u3046\\u3069\\u652f\\u6255\\u3046\\n\\n        ndp[1] = min(\\n            dp[0] + ((10 - x) if x > 0 else inf),  # \\u7e70\\u308a\\u4e0b\\u304c\\u308a\\u306b\\u306a\\u3089\\u306a\\u3044\\u306e\\u3067inf\\n            dp[1] + (10 - (x + 1))\\n        )  # 0\\u679a\\u652f\\u6255\\u3063\\u3066\\u7e70\\u308a\\u4e0b\\u304c\\u308a\\n\\n        dp = ndp\\n\\n    print((min(dp[0], dp[1] + 1)))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n# import sys\\n# input = sys.stdin.readline\\n# \\n# sys.setrecursionlimit(10 ** 7)\\n# \\n# (int(x)-1 for x in input().split())\\n# rstrip()\\n#\\n# def binary_search(*, ok, ng, func):\\n#     while abs(ok - ng) > 1:\\n#         mid = (ok + ng) // 2\\n#         if func(mid):\\n#             ok = mid\\n#         else:\\n#             ng = mid\\n#     return ok\\n\\n__starting_point()\", \"n=list(map(int,input()))\\nketa=len(n)\\nsatsu=0\\n\\nfor i in range(keta):\\n    tmp = n.pop()\\n    if i == keta-1:\\n        n.append(0)\\n    \\n    if tmp == 10:\\n        tmp=0\\n        n[-1]=n[-1]+1\\n    if tmp > 5 or (tmp==5 and n[-1] >= 5):\\n        satsu += 10 - tmp\\n        n[-1] = n[-1] + 1\\n    else:\\n        satsu += tmp\\n\\nprint((satsu+n[0]))\\n\", \"import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    N = input() + \\\"0\\\"\\n\\n    dp = [[f_inf] * 2 for _ in range(len(N) + 1)]\\n    dp[0][0] = 0\\n    dp[0][1] = 1\\n    for i in range(1, len(N) + 1):\\n        n = int(N[i - 1])\\n        dp[i][0] = min(dp[i - 1][0] + n, dp[i - 1][1] + (10 - n))\\n        dp[i][1] = min(dp[i - 1][0] + n + 1, dp[i - 1][1] + (10 - n - 1))\\n\\n    print((dp[-1][0]))\\n\\n\\ndef __starting_point():\\n    resolve()\\n\\n__starting_point()\", \"n = input()\\nn = n[::-1] + '0'\\ninf = 10 ** 9\\ndp = [[inf for _ in range(2)] for _ in range(len(n) + 1)]\\ndp[0][0] = 0\\ndp[0][1] = 2\\nfor i in range(len(n)):\\n        n_i = int(n[i])\\n        dp[i + 1][0] = min(dp[i][0] + n_i, dp[i][1] + n_i)\\n        dp[i + 1][1] = min(dp[i][0] + 11 - n_i, dp[i][1] + 9 - n_i)\\nprint(min(dp[-1][0], dp[-1][1]))\", \"def main():\\n    N = \\\"0\\\" + input()\\n    N = list(map(int, N[::-1]))\\n    ans = 0\\n    up = 0\\n    for i, n in enumerate(N):\\n        d = n + up\\n        # \\u304f\\u308a\\u3042\\u304c\\u308a\\u30a2\\u30ea\\n        if d > 5 or (i < len(N) - 1 and d == 5 and N[i + 1] >= 5):\\n            ans += 10 - d  # 0\\u679a\\u306e\\u652f\\u6255\\u3044\\uff08\\u5f8c\\u306b\\u56de\\u3059\\uff09\\u300110-d\\u679a\\u306e\\u304a\\u3064\\u308a\\n            up = 1\\n        # \\u304f\\u308a\\u3042\\u304c\\u308a\\u30ca\\u30b7\\n        else:\\n            ans += d  # d\\u679a\\u306e\\u652f\\u6255\\u3044\\u30010\\u679a\\u306e\\u304a\\u3064\\u308a\\n            up = 0\\n    print(ans)\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"\\ndef resolve():\\n    S = \\\"0\\\" + input()\\n    N = len(S)\\n\\n    dp = [[1<<60]*2 for _ in range(N+1)]\\n    dp[0][0] = 0\\n    for i in range(N):\\n        now = int(S[i])\\n        dp[i+1][0] = min(dp[i][0]+now, dp[i][1]+(10- now))\\n        dp[i + 1][1] = min(dp[i][0] + now + 1, dp[i][1] + (10 - now - 1))\\n    print((dp[N][0]))\\n\\n\\ndef __starting_point():\\n    resolve()\\n\\n__starting_point()\", \"n = input()[::-1]\\ndp = [[0, 0] for i in range(len(n) + 1)]\\ndp[0][1] = 1\\nfor i in range(len(n)):\\n    dp[i + 1][0] = min(dp[i][0] + int(n[i]), dp[i][1] - int(n[i]) + 10)\\n    dp[i + 1][1] = min(dp[i][0] + int(n[i]) + 1, dp[i][1] - int(n[i]) + 9)\\nprint(dp[len(n)][0])\", \"N = (list(input()))\\nN =N[::-1]\\nN_int = [int(i) for i in N]\\nN_int.append(0)\\nmaisu = 0\\nketa = False\\nfor i in range(len(N_int)-1):\\n    if keta ==True:\\n        N_int[i] +=1\\n    if N_int[i]<5:\\n        maisu +=N_int[i]\\n        keta =False\\n    elif N_int[i]==5 :\\n        if N_int[i+1]>4:\\n            keta =True\\n            maisu +=(10-N_int[i])\\n        else:\\n            keta =False\\n            maisu += N_int[i]\\n    else:\\n        keta =True\\n        maisu +=(10-N_int[i])  \\nif keta ==True:\\n    maisu +=1\\nprint(maisu)\", \"N = [int(_) for _ in list(input())]\\na, b = 0, 1\\nfor n in N:\\n    a, b = min(a+n, b+10-n), min(a+(n+1), b+10-(n+1))\\nprint(a)\\n\", \"import numpy as np\\nfrom numba import njit\\n\\nN = np.array([int(_) for _ in input()])\\n\\n\\ndef solve(N):\\n    p, q = 0, 1\\n    for x in N:\\n        p, q = min(p + x, q + 10 - x), min(p + x + 1, q + 9 - x)\\n    print(p)\\n\\n\\nsolve(N)\\n\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\\nimport time,random\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\neps = 1.0 / 10**10\\nmod = 10**9+7\\nmod2 = 998244353\\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\\n\\ndef LI(): return list(map(int, sys.stdin.readline().split()))\\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\ndef pf(s): return print(s, flush=True)\\ndef pe(s): return print(str(s), file=sys.stderr)\\ndef JA(a, sep): return sep.join(map(str, a))\\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\\n\\n\\ndef main():\\n    s = S()\\n    a = [int(c) for c in s]\\n\\n    dp = [0, 1]\\n    for c in a:\\n        np = [dp[0] + c, dp[0] + c + 1]\\n        if np[0] > dp[1] + (10 - c):\\n            np[0] = dp[1] + (10 - c)\\n        if np[1] > dp[1] + (9 - c):\\n            np[1] = dp[1] + (9 - c)\\n        dp = np\\n\\n    return dp[0]\\n\\nprint(main())\\n\\n\\n\\n\", \"s = input()\\nl = list(s)\\nl = [int(x) for x in l]\\ndp = [[0, 0] for i in range(len(s))]\\ndp[0][0] = l[0]\\ndp[0][1] = 11 - l[0]\\nfor i in range(1, len(s)):\\n  dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + l[i]\\n  dp[i][1] = min(dp[i - 1][0] + 11 - l[i], dp[i - 1][1] + 9 - l[i])\\nprint((min(dp[-1][0], dp[-1][1])))\\n\", \"#\\n\\nimport sys\\ninput=sys.stdin.readline\\n\\ndef main():\\n    NS=(input().strip(\\\"\\\\n\\\"))[::-1]\\n    dp=[[0]*2 for i in range(len(NS))]\\n    # 0:\\u304a\\u3064\\u308a0 1:\\u304a\\u3064\\u308a10-d\\n    dp[0][0]=int(NS[0])\\n    dp[0][1]=10-int(NS[0])\\n    for i in range(1,len(NS)):\\n        d=int(NS[i])\\n        dp[i][0]=min(dp[i-1][0]+d,dp[i-1][1]+d+1)\\n        dp[i][1]=min(dp[i-1][0]+10-d,dp[i-1][1]-1+10-d)\\n    dp[-1][1]+=1\\n    print((min(dp[-1])))\\n    \\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N = [int(_) for _ in input()]\\ndp = [[0, 0] for _ in range(len(N))]\\ndp[0][0] = min(N[0], 11 - N[0])\\ndp[0][1] = min(N[0] + 1, 10 - N[0])\\nfor i in range(1, len(N)):\\n    dp[i][0] = min(dp[i - 1][0] + N[i], dp[i - 1][1] + 10 - N[i])\\n    dp[i][1] = min(dp[i - 1][0] + N[i] + 1, dp[i - 1][1] + 9 - N[i])\\nprint((dp[-1][0]))\\n\", \"x = list(map(int,list(input())))\\nn = len(x)\\ndp = [[0,1] for _ in range(n+1)]\\nfor i in range(n):\\n    dp[i+1][0] = min(dp[i][0]+x[i],dp[i][1]+10-x[i])\\n    dp[i+1][1] = min(dp[i][0]+x[i]+1,dp[i][1]+9-x[i])\\nprint((dp[n][0]))\\n\", \"#E\\n#greedy \\nn = input()\\nn = n[::-1] + \\\"0\\\"\\nl = len(n)\\n\\nans = 0\\n\\nkuriagari=0\\n\\nfor i,v in enumerate(n):\\n    v = int(v)\\n    if kuriagari:\\n        v += 1\\n    \\n    if v<5:\\n        ans += v\\n        kuriagari = 0\\n    if v>5:\\n        ans += 10 - v\\n        kuriagari = 1\\n    if v==5:\\n        if int(n[i+1])<5:\\n            #delete is better\\n            ans += v\\n            kuriagari = 0\\n        if int(n[i+1])>=5:\\n            #kuriagari is promising\\n            ans += 10 - v\\n            kuriagari = 1\\n        \\nprint(ans)\", \"# import time\\nN = input()\\nn = len(N)\\n# t1 = time.time()\\n# \\u3074\\u3063\\u305f\\u308a\\u6255\\u3046:a \\u4f59\\u5206\\u306b\\u6255\\u3046:b\\na = int(N[0])\\nb = 11-int(N[0])\\n# t2 = time.time()\\nfor i in range(n-1):\\n    a1 = min(a+int(N[i+1]), b+int(N[i+1]))\\n    b1 = min(a+11-int(N[i+1]), b+9-int(N[i+1]))\\n    a = a1\\n    b = b1\\nprint((min(a,b)))\\n# t3 = time.time()\\n\\n# print(t2-t1,t3-t2)\\n\", \"L = list(map(int,list(input())))\\nL = [0] + L\\nN = len(L)\\ndp1 = [0 for _ in range(N+1)]\\ndp2 = [0 for _ in range(N+1)]\\n\\nfor i in range(N):\\n    dp1[i+1] = min(dp1[i] + L[i], dp2[i] + 10 - L[i])\\n    dp2[i+1] = min(dp2[i] + 10 - L[i] - 1, dp1[i] + L[i] + 1)\\n\\nprint(dp1[-1])\", \"s = input()\\ns = s[::-1]\\ns += '0'\\nans = 0\\ndp = [0, 10**9]\\nfor c in s:\\n    i = int(c)\\n    a = dp[0]+i\\n    if i<9 and a>dp[1]+i+1:\\n        a = dp[1]+i+1\\n    b = dp[1]+9-i\\n    if i>0 and b>dp[0]+10-i:\\n        b = dp[0]+10-i\\n    dp = [a, b]\\nprint(dp[0])\", \"N = [int(s) for s in input()]\\nn = len(N)\\na = 0\\nb = 11\\nfor n in N:\\n    a1 = min(a+n, b+n)\\n    b1 = min(a+11-n, b+9-n)\\n    a = a1\\n    b = b1\\nprint(min(a,b))\", \"n = input()\\na = 0\\nb = 2\\nfor s in n:\\n  v = int(s)\\n  a_ = min(a + v, b + v)\\n  b_ = min(a + 10 - v + 1, b + 10 - v + 1 - 2)\\n  a = a_\\n  b = b_\\n  \\nprint(min(a, b))\", \"s = input()\\nn = len(s)\\n\\nans = 0\\n\\nsub = 0\\njudge = False\\nfor i in range(n-1, -1, -1):\\n  key = int(s[i])+sub\\n  if key <= 4:\\n    ans += key\\n    sub = 0\\n  elif key == 5:\\n    ans += 5\\n    if i == 0:\\n      sub = 0\\n    elif int(s[i-1]) <= 4:\\n      sub = 0\\n    else:\\n      sub = 1\\n  else:\\n    ans += 10-key\\n    sub = 1\\nans += sub\\nprint(ans)\", \"s = input()\\nstate = [0, 1]\\nfor i in s:\\n    n = int(i)\\n    state_new = [min(state[0] + n, state[1] + 10 - n), \\n                 min(state[0] + n + 1, state[1] + 9 - n)]\\n    state = state_new\\nprint(state[0])\", \"n = input()\\nlen_n = len(n)\\ndp = [[0,2] for i in range(len_n+1)]\\nfor k,v in enumerate(n[::-1]):\\n    v = int(v)\\n    dp[k+1][0] = min(dp[k][0] + v, dp[k][1] + v)\\n    dp[k+1][1] = min(dp[k][0] + 10 - v + 1, dp[k][1] + 10 - v - 1)\\nprint((min(dp[len_n])))\\n\", \"N = input()\\nn = len(N)\\na = int(N[0])\\nb = 11-int(N[0])\\nfor i in range(n-1):\\n    a1 = min(a+int(N[i+1]), b+int(N[i+1]))\\n    b1 = min(a+11-int(N[i+1]), b+9-int(N[i+1]))\\n    a = a1\\n    b = b1\\nprint(min(a,b))\", \"N = input()\\nX = list(map(int, list(str(N))))\\n\\ndp1 = [float('inf')] * (len(X) + 1)  # dp1[i] := \\u4e0a\\u304b\\u3089i\\u756a\\u76ee\\u306e\\u91d1\\u984d\\u3092\\u4e01\\u5ea6\\u6255\\u3046\\u5834\\u5408\\u306e\\u6700\\u5c0f\\u5024\\ndp2 = [float('inf')] * (len(X) + 1)  # dp2[i] := \\u4e0a\\u304b\\u3089i\\u756a\\u76ee\\u306e\\u91d1\\u984d\\u3092\\uff11\\u5468\\u308a\\u5927\\u304d\\u3044\\u984d\\u3067\\u652f\\u6255\\u3046\\u5834\\u5408\\u306e\\u6700\\u5c0f\\u5024\\ndp1[0] = 0\\nfor i, x in enumerate(X):\\n    dp1[i + 1] = min(dp1[i] + x, dp2[i] + x)\\n    dp2[i + 1] = min(dp1[i] + (10 - x) + 1, dp2[i] + (10 - x) - 1)\\n\\nprint((min(dp1[-1], dp2[-1])))\\n\", \"N = list(map(int, input()))\\n\\nm = 0 # \\u6700\\u5c0f\\u306e\\u679a\\u6570\\nm_ = 1 # \\u7e70\\u308a\\u4e0a\\u304c\\u308a\\u6642\\u306e\\u679a\\u6570\\n\\nfor n in N:\\n  m, m_ = min(m+n, m_ + 10-n), min(m+n + 1, m_ + 10-(n+1))\\nprint(m)\", \"# coding: utf-8\\nimport sys\\n\\nsr = lambda: sys.stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\nN = sr()\\ndp = [0, 1]  # \\u3061\\u3087\\u3046\\u3069\\u6255\\u3046\\u6700\\u5c0f\\u679a\\u6570\\u3001\\uff11\\u5186\\u591a\\u304f\\u306f\\u3089\\u3046\\u6700\\u5c0f\\u679a\\u6570\\nfor x in N:\\n    x = int(x)\\n    prev = dp[:]\\n    dp[0] = min(prev[0]+x, prev[1]+(10-x))\\n    dp[1] = min(prev[0]+x+1, prev[1]+(10-x-1))\\n\\nanswer = dp[0]\\nprint(answer)\\n# 33\\n\", \"n = input()\\ndp = [0,1]\\nans = 0\\nfor i in range(len(n)):\\n    cur1 = dp[0]\\n    cur2 = dp[1]\\n    if i != len(n)-1:\\n        dp[0] = min(cur1+int(n[i]), cur2+10-int(n[i]))\\n        dp[1] = min(cur1+int(n[i])+1, cur2+9-int(n[i]))\\n    else:\\n        ans = min(dp[0]+int(n[i]), dp[1]+10-int(n[i]))\\nprint(ans)\\n\", \"N = [int(c) for c in input()][::-1]\\nN.append(0)\\nans = 0\\nfor i in range(len(N)):\\n    c = N[i]\\n    if c <= 4:\\n        ans += c\\n    elif 6 <= c:\\n        ans += 10 - c\\n        N[i + 1] += 1\\n    else:\\n        if N[i + 1] < 5:\\n            ans += c\\n        else:\\n            ans += 10 - c\\n            N[i + 1] += 1\\nprint(ans)\", \"# coding: utf-8\\nimport sys\\nsysread = sys.stdin.readline\\nread = sys.stdin.read\\nsys.setrecursionlimit(10**7)\\n\\ndef run():\\n    N = list(map(int, list(input())))\\n    N = N[::-1] + [0]\\n    count = 0\\n    seq = 0\\n    for idx, n in enumerate(N[:]):\\n        if seq == 1 and (n >= 5 or (n == 4 and N[idx+1] >= 5)):\\n            count += 9 - n\\n        elif seq == 0 and (n >= 6 or (n == 5 and N[idx+1] >= 5)):\\n            count += 10 - n\\n            seq = 1\\n        else:\\n            count += n + seq\\n            seq = 0\\n    print(count)\\n\\ndef __starting_point():\\n    run()\\n__starting_point()\", \"A = list(map(int, input()))\\nwhile A[-1] == 0:\\n  A.pop()\\nn = len(A)\\ndp = [[0]*2 for _ in range(n)]\\ndp[0][1] = 1\\nfor i, a in enumerate(A[:-1]):\\n  if i < n-1:\\n    dp[i+1][0] = min(dp[i][0]+a, dp[i][1]+10-a)\\n    dp[i+1][1] = min(dp[i][0]+a+1, dp[i][1]+9-a)\\nans = min(dp[-1][0]+A[-1], dp[-1][1]+10-A[-1])\\nprint(ans)\", \"#E\\n#greedy \\nn = input()\\nl = len(n)\\n\\n#a is kuriagari naku, pittari na case\\n#b is kuriagari ari\\na,b = 0,1\\nfor v in n:\\n    v = int(v)\\n    a_next = min(a+v, b+(10-v))\\n    b_next = min(a+v+1, b+(10-(v+1)))\\n    a = a_next\\n    b = b_next\\n    \\n    #\\u7e70\\u308a\\u4e0a\\u304c\\u308a\\u304c\\u767a\\u751f\\u3059\\u308b\\u21d4\\u5f15\\u304f\\u6570\\u3092+1\\u3059\\u308b\\n    #(10-v)\\u3084(10-(v+1)) means charges\\n    #last keta is pittari, no amari happenes\\n\\nprint(a)\", \"n=[int(x) for x in input()]\\n\\ndp=[[100000000000 for i in range(len(n)+1)]for j in range(2)]\\ndp[0][0]=0\\ndp[1][0]=1\\nfor i in range(len(n)):\\n  d=n[i]\\n  dp[0][i+1]=min(dp[0][i+1],min(d,11-d)+dp[0][i],10-d+dp[1][i])\\n  dp[1][i+1]=min(dp[1][i+1],d+1+dp[0][i],9-d+dp[1][i])\\n  \\n  \\nprint((dp[0][len(n)]))\\n#print(dp)\\n\", \"s = \\\"0\\\"+input()\\nans = 0\\nn = len(s)\\nf = 0\\np = 0\\nfor i in range(1,n+1):\\n    n = int(s[-i])\\n    # n += f\\n    if p+(n>4) > 5:\\n        f = 1\\n    else:\\n        # ans += f\\n        f = 0\\n    n += f\\n    ans += min(n,10-n)\\n    p = n\\n# ans += f\\nprint(ans)\", \"s = str(input())\\nn = len(s)\\ndp = [[0]*2 for _ in range(n+1)]\\ndp[0][1] = 1\\nfor i in range(n):\\n    p = int(s[i])\\n    dp[i+1][0] = min(dp[i][1]+10-p,dp[i][0]+p)\\n    dp[i+1][1] = min(dp[i][1]+10-p-1,dp[i][0]+p+1)\\nprint(dp[-1][0])\", \"N = input()\\nN = N[::-1]+\\\"0\\\"\\nans = 0\\nup = 0\\nfor i,n in enumerate(N):\\n    d = int(n)+up\\n    if 5 < d or (d == 5 and i < len(N)-1 and int(N[i+1]) >= 5):\\n        ans += (10-d)\\n        up = 1\\n    else:\\n        ans += d\\n        up = 0\\nprint(ans)\\n\", \"N=input()\\n\\ndp0=[0]*(len(N)+1)\\ndp1=[0]*(len(N)+1)\\ndp1[0]=1\\n\\nfor i in range(len(N)):\\n    n=int(N[i])\\n    dp0[i+1]=min(dp0[i]+n, dp1[i]+(10-n))\\n    n+=1\\n    dp1[i+1]=min(dp0[i]+n, dp1[i]+(10-n))\\n\\n#print(dp0)\\n#print(dp1)\\nprint((dp0[-1]))\\n\", \"import sys\\nstdin = sys.stdin\\nsys.setrecursionlimit(10**9)\\n\\nni = lambda: int(ns())\\nna = lambda: list(map(int, stdin.readline().split()))\\nnn = lambda: list(stdin.readline().split())\\nns = lambda: stdin.readline().rstrip()\\n\\n\\nn = ns()\\nn = list(map(int,n[::-1])) + [0]\\n\\nans = 0\\n\\nfor i in range(len(n)):\\n    a = n[i]\\n    if a <= 4:\\n        ans += a\\n    elif a >= 6:\\n        ans += 10-a\\n        n[i+1] += 1\\n    else:\\n        if n[i+1] <= 4:\\n            ans += a\\n        else:\\n            ans += a\\n            n[i+1] += 1\\n\\nprint(ans)\", \"s = input()\\nn = len(s)\\n\\ns = list(map(int, list(s)))\\ndp1 = [0] * (n + 1)\\ndp2 = [0] * (n + 1)\\ndp2[0] = 1\\n\\nfor k in range(n):\\n    dp1[k + 1] = min([dp1[k] + s[k]       , dp2[k] + 10 - s[k]])\\n    dp2[k + 1] = min([dp1[k] + s[k] + 1, dp2[k] + 10 - s[k] - 1])\\n\\nprint(dp1[-1])\", \"N = list(map(int, input()))\\nN = N[::-1] + [0]\\n\\ncount = 0\\n\\nfor i, n in enumerate(N):\\n  if n < 5:\\n    count += n\\n  elif n > 5:\\n    count += 10 - n\\n    N[i+1] += 1\\n  elif n == 5:\\n    if N[i+1] >= 5:\\n      N[i+1] += 1\\n    count += 5\\n    \\nprint(count)\", \"def main():\\n    s = input()\\n    dp = [0, 1]\\n    for c in s:\\n        x = int(c)\\n        a = dp[0] + x\\n        if a > dp[1] + 10 - x:\\n            a = dp[1] + 10 - x\\n        b = dp[0] + x + 1\\n        if b > dp[1] + 10 - x - 1:\\n            b = dp[1] + 10 - x - 1\\n        dp[0] = a\\n        dp[1] = b\\n    dp[1] += 1\\n    print((min(dp)))\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N = input()\\na, b = 0, 1\\nfor i in N:\\n    x = int(i)\\n    a, b = min(a+x, b+10-x), min(a+x+1, b+9-x)\\nprint (a)\", \"def main():\\n    import sys\\n    input = sys.stdin.readline\\n    sys.setrecursionlimit(10**7)\\n    from collections import Counter, deque\\n    from itertools import combinations, permutations, accumulate, groupby, product\\n    from bisect import bisect_left,bisect_right\\n    from heapq import heapify, heappop, heappush\\n    import math\\n    #from math import gcd\\n\\n    #inf = 10**17\\n    #mod = 10**9 + 7\\n\\n    n = list(input().rstrip())\\n    n = [0] + n\\n    n = n[::-1]\\n    ln = len(n)\\n    res = 0\\n    a = 0\\n    for i in range(ln):\\n        s = int(n[i])\\n        s += a\\n        if 0<=s<=4:\\n            res += s\\n            a = 0\\n        elif 6<=s:\\n            res += 10-s\\n            a = 1\\n        else:\\n            if int(n[i+1])>=5:\\n                res += 10-s\\n                a = 1\\n            else:\\n                res += s\\n                a = 0\\n            \\n    print(res)\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"S = ['0'] + list(input()) + ['0']\\nN = len(S)\\nflag = False\\n\\nans = 0\\n\\nfor i in range(N - 1, 0, -1):\\n    j = int(S[i])\\n    if flag:\\n        j += 1\\n        S[i] = j\\n\\n    if j <= 5:\\n        if j == 5 and int(S[i - 1]) >= 5:\\n            ans += j\\n            flag = True\\n        else:\\n            ans += j\\n            flag = False\\n\\n    else:\\n        ans += 10 - j\\n        flag = True\\n\\nif flag:\\n    ans += 1\\n\\n\\n# print (ans)\\ncount = 0\\nfor s in S:\\n    if s == 5:\\n        count += 1\\n    else:\\n        ans -= max(0, count - 2)\\n        count = 0\\n\\nprint (ans)\\n            \\n\\n\\n        \\n    \\n\", \"S = input()\\nans = 0\\nflag = False #\\u7e70\\u308a\\u4e0a\\u304c\\u308a\\u3042\\u308a\\u306a\\u3089True\\nflag2 = False #\\u524d\\u304c5\\u306a\\u3089True\\nfor k in range(len(S)):\\n  n = int(S[-k-1])\\n  if flag2:\\n    if n < 5:\\n      flag = False\\n    else:\\n      flag = True\\n  if flag:\\n    n += 1\\n  if n == 5:\\n    ans += 5\\n    flag2 = True\\n    flag = False\\n  elif n < 5:\\n    ans += n\\n    flag2 = False\\n    flag = False\\n  else:\\n    ans += 10-n\\n    flag2 = False\\n    flag = True\\nif flag:\\n  ans += 1\\nprint(ans)\", \"N = input()\\n\\nover = 1\\neq = 0\\n\\nfor n in map(int, N):\\n    o = min(eq + n + 1, over + (10 - n) - 1)\\n    e = min(eq + n, over + (10 - n))\\n\\n    over = o\\n    eq = e\\n\\nprint(eq)\\n\"]",
        "difficulty": "interview",
        "input": "314159265358979323846264338327950288419716939937551058209749445923078164062862089986280348253421170\n",
        "output": "243\n",
        "halu_type": "Calculate Boundary Hallucination",
        "fn_name": "NaN",
        "starter_code": "",
        "url": "https://atcoder.jp/contests/abc155/tasks/abc155_e"
    }
]