[
    {
        "id": 673,
        "task_id": 2049,
        "test_case_id": 3,
        "question": "You've got an array, consisting of n integers a_1, a_2, ..., a_{n}. Also, you've got m queries, the i-th query is described by two integers l_{i}, r_{i}. Numbers l_{i}, r_{i} define a subsegment of the original array, that is, the sequence of numbers a_{l}_{i}, a_{l}_{i} + 1, a_{l}_{i} + 2, ..., a_{r}_{i}. For each query you should check whether the corresponding segment is a ladder. \n\nA ladder is a sequence of integers b_1, b_2, ..., b_{k}, such that it first doesn't decrease, then doesn't increase. In other words, there is such integer x (1 \u2264 x \u2264 k), that the following inequation fulfills: b_1 \u2264 b_2 \u2264 ... \u2264 b_{x} \u2265 b_{x} + 1 \u2265 b_{x} + 2... \u2265 b_{k}. Note that the non-decreasing and the non-increasing sequences are also considered ladders.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of array elements and the number of queries. The second line contains the sequence of integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where number a_{i} stands for the i-th array element.\n\nThe following m lines contain the description of the queries. The i-th line contains the description of the i-th query, consisting of two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the boundaries of the subsegment of the initial array.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint m lines, in the i-th line print word \"Yes\" (without the quotes), if the subsegment that corresponds to the i-th query is the ladder, or word \"No\" (without the quotes) otherwise. \n\n\n-----Examples-----\nInput\n8 6\n1 2 1 3 3 5 2 1\n1 3\n2 3\n2 4\n8 8\n1 4\n5 8\n\nOutput\nYes\nYes\nNo\nYes\nNo\nYes",
        "solutions": "[\"import sys\\nn,m=list(map(int,sys.stdin.readline().split()))\\nM=[m]\\nA=list(map(int,sys.stdin.readline().split()))\\nL=[0]*n\\ninc=False\\ndec=False\\ndef ALLYes():\\n    Ans=\\\"\\\"\\n    for i in range(M[0]):\\n        Ans+=\\\"Yes\\\\n\\\"\\n    sys.stdout.write(Ans)\\n    return\\nfor i in range(1,n):\\n    if(A[i]>A[i-1]):\\n        L[i]=1\\n        inc=True\\n    elif(A[i]==A[i-1]):\\n        L[i]=0\\n    else:\\n        L[i]=-1\\n        dec=True\\nif(inc==False or dec==False):\\n    ALLYes()\\nelse:\\n    neg=L.index(-1)\\n    pos=L.index(1)\\n    First=[-1]*n\\n    for i in range(2,n):\\n        if(L[i]==0):\\n            x=max(neg,pos)\\n            if(x<=i):\\n                First[i]=x\\n            elif(min(neg,pos)<=i):\\n                First[i]=min(neg,pos)\\n            else:\\n                First[i]=-1\\n        if(L[i]==1):\\n            if(neg>i):\\n                First[i]=-1\\n            else:\\n                First[i]=neg\\n            pos=i\\n        if(L[i]==-1):\\n            if(pos>i):\\n                First[i]=-1\\n            else:\\n                First[i]=pos\\n            neg=i\\n    Ans=\\\"\\\"\\n    for i in range(m):\\n        l,r=list(map(int,sys.stdin.readline().split()))\\n        r-=1\\n        if(r-l<1):\\n            Ans+=\\\"Yes\\\\n\\\"\\n            continue\\n        if(L[r]==0):\\n            r=First[r]\\n            if(r<1):\\n                Ans+=\\\"Yes\\\\n\\\"\\n                continue\\n        if(L[r]==1):\\n            r=First[r]\\n            if(r<l):\\n                Ans+=\\\"Yes\\\\n\\\"\\n                continue\\n            else:\\n                Ans+=\\\"No\\\\n\\\"\\n                continue\\n        elif(L[r]==-1):\\n            r=First[r]\\n            if(r<l):\\n                Ans+=\\\"Yes\\\\n\\\"\\n                continue\\n            r=First[r]\\n            if(r<l):\\n                Ans+=\\\"Yes\\\\n\\\"\\n                continue\\n            else:\\n                Ans+=\\\"No\\\\n\\\"\\n                continue\\n    sys.stdout.write(Ans)\\n    \\n    \\n\", \"M = lambda: map(int, input().split())\\nL = lambda: list(map(int, input().split()))\\nI = lambda: int(input())\\n\\nn, k = M()\\nt = [0] + L()\\na, b = list(range(n + 1)), list(range(n + 1))\\nfor i in range(n, 1, -1):\\n    if t[i] >= t[i - 1]: a[i - 1] = a[i]\\n    if t[i] <= t[i - 1]: b[i - 1] = b[i]\\np = ['No'] * k\\nfor i in range(k):\\n    x, y = M()\\n    if b[a[x]] >= y: p[i] = 'Yes'\\nprint('\\\\n'.join(p))\", \"import sys\\n\\nn,m=list(map(int,sys.stdin.readline().split()))\\n\\nL=list(map(int,sys.stdin.readline().split()))\\n\\nR=[0]*n\\nK=[0]*n\\np=0\\n\\nfor i in range(1,n):\\n    if(L[i]<L[i-1]):\\n        for j in range(p,i):\\n            R[j]=i\\n        p=i\\nfor j in range(p,n):\\n    R[j]=n\\np=0\\nfor i in range(1,n):\\n    if(L[i]>L[i-1]):\\n        for j in range(p,i):\\n            K[j]=i\\n        p=i\\nfor j in range(p,n):\\n    K[j]=n\\nfor i in range(m):\\n    x,y=list(map(int,sys.stdin.readline().split()))\\n    x-=1\\n    y-=1\\n    r=R[x]\\n    if(r>=y):\\n        sys.stdout.write(\\\"Yes\\\\n\\\")\\n        continue\\n    e=K[r]\\n    if(e>y):\\n        sys.stdout.write(\\\"Yes\\\\n\\\")\\n        continue\\n    sys.stdout.write(\\\"No\\\\n\\\")\\n    \\n\", \"def main():\\n    from sys import stdin, stdout\\n    (n, m) = list(map(int, stdin.readline().strip().split(' ')))\\n    a = [0] + list(map(int, stdin.readline().strip().split(' ')))\\n    r = [0] * (n + 1) # r[i] stores highest index to right of i st. i..ri is nondecreasing\\n    l = [0] * (n + 1) # l[i] stores smallest index to the left of i st. li..i is nonincreasing\\n\\n    l[1] = 1\\n    r[n] = n\\n\\n    for i in range(2, n + 1):\\n        if a[i - 1] >= a[i]:\\n            l[i] = l[i - 1]\\n        else:\\n            l[i] = i\\n\\n    for i in range(n - 1, 0, -1):\\n        if a[i + 1] >= a[i]:\\n            r[i] = r[i + 1]\\n        else:\\n            r[i] = i\\n\\n    for i in range(m):\\n        (a, b) = list(map(int, stdin.readline().strip().split(' ')))\\n        if r[a] >= l[b]:\\n            stdout.write(\\\"Yes\\\\n\\\")\\n        else:\\n            stdout.write(\\\"No\\\\n\\\")\\nmain()\\n\", \"import sys\\n\\n\\n\\nn,m=list(map(int,sys.stdin.readline().split()))\\n\\n\\n\\nL=list(map(int,sys.stdin.readline().split()))\\n\\n\\n\\nR=[0]*n\\n\\nK=[0]*n\\n\\np=0\\n\\n\\n\\nfor i in range(1,n):\\n\\n    if(L[i]<L[i-1]):\\n\\n        for j in range(p,i):\\n\\n            R[j]=i\\n\\n        p=i\\n\\nfor j in range(p,n):\\n\\n    R[j]=n\\n\\np=0\\n\\nfor i in range(1,n):\\n\\n    if(L[i]>L[i-1]):\\n\\n        for j in range(p,i):\\n\\n            K[j]=i\\n\\n        p=i\\n\\nfor j in range(p,n):\\n\\n    K[j]=n\\n\\nfor i in range(m):\\n\\n    x,y=list(map(int,sys.stdin.readline().split()))\\n\\n    x-=1\\n\\n    y-=1\\n\\n    r=R[x]\\n\\n    if(r>=y):\\n\\n        sys.stdout.write(\\\"Yes\\\\n\\\")\\n\\n        continue\\n\\n    e=K[r]\\n\\n    if(e>y):\\n\\n        sys.stdout.write(\\\"Yes\\\\n\\\")\\n\\n        continue\\n\\n    sys.stdout.write(\\\"No\\\\n\\\")\\n\\n    \\n\\n\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"n,m=list(map(int,input().split()))\\nl=list(map(int,input().split()))\\nl1=[0]*(n)\\nl3=[0]*n\\nf=False\\nv=0\\nfor i in range(1,n) :\\n    if l[i]<l[i-1] :\\n        f=True\\n        v=i\\n    if l[i]>l[i-1] and f :\\n        f=False\\n        for j in range(i-1,v-1,-1) :\\n            l3[j]=j\\n        l1[v]=1\\n        v=-1\\n    \\nl2=[0]*(n)\\nfor i in range(1,n) :\\n    l2[i]=l1[i]+l2[i-1]\\ns=[]\\nfor i in range(m) :\\n    a,b=list(map(int,input().split()))\\n    t=l2[b-1]-l2[a-1]\\n    \\n    if l3[b-1]>=b-1 :\\n        t-=1\\n    \\n    if t>0 :\\n        s.append(\\\"No\\\")\\n    else :\\n        s.append(\\\"Yes\\\")\\nprint(\\\"\\\\n\\\".join(s))\\n\", \"'''input\\n8 6\\n1 2 1 3 3 5 2 1\\n1 3\\n2 3\\n2 4\\n8 8\\n1 4\\n5 8\\n'''\\nfrom sys import stdin\\nimport sys\\nimport copy\\nsys.setrecursionlimit(15000)\\n\\n\\ndef create_dp(arr, n):\\n\\tdp1 = [-1] * n\\n\\tdp1[-1] = n - 1\\n\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif arr[i] <= arr[i + 1]:\\n\\t\\t\\tdp1[i] = dp1[i + 1]\\n\\t\\telse:\\n\\t\\t\\tdp1[i] = i\\n\\n\\tdp2 = [-1] * n\\n\\tdp2[-1] = n - 1\\n\\tfor i in range(n - 2, -1, -1):\\n\\t\\tif arr[i] >= arr[i + 1]:\\n\\t\\t\\tdp2[i] = dp2[i + 1]\\n\\t\\telse:\\n\\t\\t\\tdp2[i] = i\\n\\treturn dp1, dp2\\n\\n\\n# main starts\\nn, m = list(map(int, stdin.readline().split()))\\narr = list(map(int, stdin.readline().split()))\\ndp1, dp2 = create_dp(arr, n)\\nfor _ in range(m):\\n\\tl, r = list(map(int, stdin.readline().split()))\\n\\tif dp2[dp1[l - 1]] >= r - 1:\\n\\t\\tprint(\\\"Yes\\\")\\n\\telse:\\n\\t\\tprint(\\\"No\\\")\", \"from sys import stdin\\n\\ninput = stdin.readline\\n\\n[n, q] = [int(item) for item in input().split(' ')]\\narr = [int(item) for item in input().split(' ')]\\nqueries = [[int(item) for item in input().split(' ')] for i in range(q)]\\n\\nb = [1]\\n\\nfor i in range(1, n):\\n    b.append((b[-1] + 1) if arr[i] <= arr[i - 1] else 1)\\n\\nc = [1]\\nfor i in reversed(list(range(n - 1))):\\n    c.append(c[-1] + 1 if arr[i] <= arr[i + 1] else 1)\\nc = [item for item in reversed(c)]\\n\\nfor query in queries:\\n    (x, y) = query\\n    x -= 1\\n    y -= 1\\n    print('Yes' if (x + c[x] > y) or (y - b[y] < x) or (x + c[x] > y - b[y]) else 'No')\\n\\\"\\\"\\\"\\n5 1\\n1 3 3 2 2\\n1 4\\n\\n5 1\\n1 2 2 1 1\\n1 4\\n\\n5 1\\n2 2 1 1 2\\n1 5\\n\\\"\\\"\\\"\\n\", \"import sys\\n\\n# inf = float(\\\"inf\\\")\\n# sys.setrecursionlimit(10000000)\\n\\n# abc='abcdefghijklmnopqrstuvwxyz'\\n# abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\\n# mod, MOD = 1000000007, 998244353\\n# words = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',10:'ten',11:'eleven',12:'twelve',13:'thirteen',14:'fourteen',15:'quarter',16:'sixteen',17:'seventeen',18:'eighteen',19:'nineteen',20:'twenty',21:'twenty one',22:'twenty two',23:'twenty three',24:'twenty four',25:'twenty five',26:'twenty six',27:'twenty seven',28:'twenty eight',29:'twenty nine',30:'half'}\\n# vow=['a','e','i','o','u']\\n# dx,dy=[0,1,0,-1],[1,0,-1,0]\\n\\n# import random\\n# from collections import deque, Counter, OrderedDict,defaultdict\\n# from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\\n# from math import ceil,floor,log,sqrt,factorial,pi,gcd\\n# from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\\n\\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\\ndef input(): return sys.stdin.readline().strip()\\n\\nn,m = get_ints()\\nArr = get_array()\\nup = [i for i in range(n)]\\ndown = [i for i in range(n)]\\nfor i in range(1,n):\\n    if Arr[i-1]<=Arr[i]:\\n        up[i] = up[i-1]\\n    if Arr[i-1]>=Arr[i]:\\n        down[i] = down[i-1]\\nwhile m:\\n    l,r = get_ints()\\n    if (l-1)>=up[down[r-1]]:\\n        print('Yes')\\n    else:\\n        print('No')\\n    m-=1\", \"import sys\\n\\n# inf = float(\\\"inf\\\")\\n# sys.setrecursionlimit(10000000)\\n\\n# abc='abcdefghijklmnopqrstuvwxyz'\\n# abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\\n# mod, MOD = 1000000007, 998244353\\n# words = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',10:'ten',11:'eleven',12:'twelve',13:'thirteen',14:'fourteen',15:'quarter',16:'sixteen',17:'seventeen',18:'eighteen',19:'nineteen',20:'twenty',21:'twenty one',22:'twenty two',23:'twenty three',24:'twenty four',25:'twenty five',26:'twenty six',27:'twenty seven',28:'twenty eight',29:'twenty nine',30:'half'}\\n# vow=['a','e','i','o','u']\\n# dx,dy=[0,1,0,-1],[1,0,-1,0]\\n\\n# import random\\n# from collections import deque, Counter, OrderedDict,defaultdict\\n# from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\\n# from math import ceil,floor,log,sqrt,factorial,pi,gcd\\n# from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\\n\\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\\ndef input(): return sys.stdin.readline().strip()\\n\\nn,m = get_ints()\\nArr = get_array()\\nup = [i for i in range(n)]\\ndown = [i for i in range(n)]\\nfor i in range(1,n):\\n    if Arr[i-1]<=Arr[i]:\\n        up[i] = up[i-1]\\n    if Arr[i-1]>=Arr[i]:\\n        down[i] = down[i-1]\\nwhile m:\\n    l,r = get_ints()\\n    if (l-1)>=up[down[r-1]]:\\n        print('Yes')\\n    else:\\n        print('No')\\n    m-=1\", \"import math,sys\\nfrom sys import stdin, stdout\\nfrom collections import Counter, defaultdict, deque\\ninput = stdin.readline\\nI = lambda:int(input())\\nli = lambda:list(map(int,input().split()))\\n\\ndef case():\\n\\tn,q=li()\\n\\ta=li()\\n\\tup=[0]*n\\n\\tdown=[0]*n \\n\\ti=0\\n\\twhile(i<n):\\n\\t\\tj=i \\n\\t\\twhile(j<n-1 and a[j]<=a[j+1]):\\n\\t\\t\\tj+=1\\n\\t\\tfor k in range(i,j+1):\\n\\t\\t\\tup[k]=j \\n\\t\\ti=j+1\\n\\ti=0\\n\\twhile(i<n):\\n\\t\\tj=i \\n\\t\\twhile(j<n-1 and a[j]>=a[j+1]):\\n\\t\\t\\tj+=1\\n\\t\\tfor k in range(i,j+1):\\n\\t\\t\\tdown[k]=j\\n\\t\\ti=j+1\\n\\tfor i in range(q):\\n\\t\\tl,r=li()\\n\\t\\tp=up[l-1]\\n\\t\\tq=down[p]\\n\\t\\tif(q+1>=r):\\n\\t\\t\\tprint(\\\"Yes\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"No\\\")\\n\\n\\n\\t\\t\\n\\nfor _ in range(1):\\n\\tcase()\", \"import sys\\ninput=sys.stdin.readline\\na,b=list(map(int,input().split()))\\nz=list(map(int,input().split()))\\nans=[0]\\nfor i in range(1,len(z)):\\n    if(z[i]>z[i-1]):\\n        ans.append(1)\\n    elif(z[i]<z[i-1]):\\n        ans.append(2)\\n    else:\\n        ans.append(0)\\n\\nstart=[0 for i in range(len(ans))]\\nfor i in range(len(ans)-1,-1,-1):\\n    if(ans[i]==2):\\n        start[i]=i\\n    else:\\n        if(i==len(ans)-1):\\n            start[i]=-1\\n        else:\\n            start[i]=start[i+1]\\nend=[0 for i in range(len(ans))]\\nfor i in range(len(ans)):\\n    if(ans[i]==1):\\n        end[i]=i\\n    else:\\n        if(i==0):\\n            end[i]=-1\\n        else:\\n            end[i]=end[i-1]\\n\\nfor i in range(b):\\n    l,r=list(map(int,input().split()))\\n    if(l==len(z)):\\n        print('Yes')\\n        continue;\\n    if(start[l]==-1 or end[r-1]==-1):\\n        print('Yes')\\n    else:\\n        if(start[l]>end[r-1]):\\n            print('Yes')\\n        else:\\n            print('No')\\n    \\n\", \"n, m = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\nup = [i for i in range(n)]\\ndown = [i for i in range(n)]\\n\\nfor i in range(1, n):\\n    if arr[i-1] <= arr[i]:\\n        up[i] = up[i-1]\\n    if arr[i-1] >= arr[i]:\\n        down[i] = down[i-1]\\n\\nall_res = []\\nseg = list(tuple(list(map(int, input().split())) for _ in range(m)))\\nfor l, r in seg:\\n    if l - 1 >= up[down[r - 1]]:\\n        all_res.append('Yes')\\n    else:\\n        all_res.append('No')\\nprint('\\\\n'.join(all_res))\\n\", \"n,m=map(int,input().split())\\n*a,=map(int,input().split())\\ninc=[*range(n)]\\ndec=[*range(n)]\\nfor i in range(n-1,0,-1):\\n    if a[i]>=a[i-1]:inc[i-1]=inc[i]\\n    if a[i]<=a[i-1]:dec[i-1]=dec[i]\\nk=['No']*m\\nl=0\\nfor i,j in (map(lambda i: int(i)-1,input().split()) for _ in ' '*m):\\n    if dec[inc[i]]>=j: k[l]='Yes'\\n    l+=1\\nprint('\\\\n'.join(k))\", \"import os\\n\\ndef __starting_point():\\n    n, m = list(map(int, input().split()))\\n    arr = list(map(int, input().split()))\\n    increase = [-1] * n\\n    decrease = [-1] * n\\n    tmp = n - 1\\n    for i in range(n - 1, -1, -1):\\n        if i != n - 1:\\n            if arr[i] > arr[i + 1]:\\n                tmp = i\\n        increase[i] = tmp\\n    tmp = 0\\n    for i in range(n):\\n        if i != 0:\\n            if arr[i - 1] < arr[i]:\\n                tmp = i\\n        decrease[i] = tmp\\n    result = []\\n    for i in range(m):\\n        a, b = list(map(int, input().split()))\\n        a -= 1\\n        b -= 1\\n        result.append(\\\"Yes\\\\n\\\" if increase[a] >= decrease[b] else \\\"No\\\\n\\\")\\n\\n    print(\\\"\\\".join(result))\\n\\n__starting_point()\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Sat Aug  1 18:08:37 2020\\n\\n@author: divyarth\\n\\\"\\\"\\\"\\n\\nimport sys\\nimport heapq\\nfrom collections import deque\\nfrom collections import defaultdict\\ninput=sys.stdin.readline\\nprint=sys.stdout.write\\nsys.setrecursionlimit(100000)\\ndef PRINT(lst,sep=' '): print(sep.join(map(str,lst)))\\nI=lambda : list(map(int,input().split(' ')))\\n\\ndef solve(lst,queries):\\n    \\n    n=len(lst)\\n    arr_f=[1]\\n    cur_max=1\\n    for i in range(n-2,-1,-1):\\n        if lst[i]<=lst[i+1]:\\n            cur_max+=1\\n        else:\\n            cur_max=1\\n        arr_f.append(cur_max)\\n    arr_f.reverse()\\n        \\n    arr_b=[1]\\n    cur_max=1\\n    for i in range(n-1):\\n        if lst[i+1]<=lst[i]:\\n            cur_max+=1\\n        else:\\n            cur_max=1\\n        arr_b.append(cur_max)\\n    \\n    ans=[]\\n    for l,r in queries:\\n        l=l-1\\n        r=r-1\\n        if arr_f[l]+arr_b[r]>=r-l+1:\\n            ans.append('Yes')\\n        else:\\n            ans.append('No')\\n    PRINT(ans,sep='\\\\n')\\n    \\nn,m=I()\\nlst=I()\\nqueries=[I() for i in range(m)]\\nsolve(lst,queries)\", \"[n, q]=list(map(int, input().split()))\\narr=list(map(int, input().split()))\\ninterval=[idx for idx in range(n)]\\nl ,r = 0, 1\\nwhile(l<=r and r<n):\\n    while(r<n and arr[r]>=arr[r-1]):\\n        r+=1\\n    last=r\\n    while(r<n and arr[r]<=arr[r-1]):\\n        if(arr[r]!=arr[last]):\\n            last=r\\n        r+=1\\n    for idx in range(l, r):\\n        interval[idx]=max(interval[idx], r-1)\\n    l=last\\n\\nans=[]\\nfor _ in range(q):\\n    [l, r]=list(map(int, input().split()))\\n    if(interval[l-1]>=r-1):\\n        ans.append('Yes')\\n    else:\\n        ans.append('No')\\nfor x in ans:\\n    print(x)\", \"from sys import stdin\\ninput=lambda : stdin.readline().strip()\\nfrom math import ceil,sqrt,factorial,gcd\\nfrom collections import deque\\nn,m=map(int,input().split())\\nl=list(map(int,input().split()))\\nl=[0]+l\\na=[0 for i in range(n+1)]\\na[-1]=n\\nb=list(a)\\nfor i in range(n-1,0,-1):\\n\\tif l[i]<=l[i+1]:\\n\\t\\ta[i]=a[i+1]\\n\\telse:\\n\\t\\ta[i]=i\\n\\tif l[i]>=l[i+1]:\\n\\t\\tb[i]=b[i+1]\\n\\telse:\\n\\t\\tb[i]=i\\n# print(a)\\n# print(b)\\nfor i in range(m):\\n\\tx,y=map(int,input().split())\\n\\tif b[a[x]]>=y:\\n\\t\\tprint(\\\"Yes\\\")\\n\\telse:\\n\\t\\tprint(\\\"No\\\")\"]",
        "difficulty": "interview",
        "input": "2 5\n1 1\n1 2\n2 2\n2 2\n1 2\n1 2\n",
        "output": "Yes\nYes\nYes\nYes\nYes\n",
        "halu_type": "Structural Access Hallucination",
        "fn_name": null,
        "starter_code": "",
        "url": "https://codeforces.com/problemset/problem/279/C"
    }
]