[{"id": 0, "task_id": 2273, "prompt": "You are required to solve a programming problem with python. Please enclose your code inside a ```python``` block. \nQUESTION:\nYou have a simple undirected graph consisting of $n$ vertices and $m$ edges. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.\n\nLet's make a definition.\n\nLet $v_1$ and $v_2$ be two some nonempty subsets of vertices that do not intersect. Let $f(v_{1}, v_{2})$ be true if and only if all the conditions are satisfied:  There are no edges with both endpoints in vertex set $v_1$.  There are no edges with both endpoints in vertex set $v_2$.  For every two vertices $x$ and $y$ such that $x$ is in $v_1$ and $y$ is in $v_2$, there is an edge between $x$ and $y$. \n\nCreate three vertex sets ($v_{1}$, $v_{2}$, $v_{3}$) which satisfy the conditions below;  All vertex sets should not be empty.  Each vertex should be assigned to only one vertex set.  $f(v_{1}, v_{2})$, $f(v_{2}, v_{3})$, $f(v_{3}, v_{1})$ are all true. \n\nIs it possible to create such three vertex sets? If it's possible, print matching vertex set for each vertex.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($3 \\le n \\le 10^{5}$, $0 \\le m \\le \\text{min}(3 \\cdot 10^{5}, \\frac{n(n-1)}{2})$)\u00a0\u2014 the number of vertices and edges in the graph.\n\nThe $i$-th of the next $m$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.\n\n\n-----Output-----\n\nIf the answer exists, print $n$ integers. $i$-th integer means the vertex set number (from $1$ to $3$) of $i$-th vertex. Otherwise, print $-1$.\n\nIf there are multiple answers, print any.\n\n\n-----Examples-----\nInput\n6 11\n1 2\n1 3\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n\nOutput\n1 2 2 3 3 3 \nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example, if $v_{1} = \\{ 1 \\}$, $v_{2} = \\{ 2, 3 \\}$, and $v_{3} = \\{ 4, 5, 6 \\}$ then vertex sets will satisfy all conditions. But you can assign vertices to vertex sets in a different way; Other answers like \"2 3 3 1 1 1\" will be accepted as well. [Image] \n\nIn the second example, it's impossible to make such vertex sets.\nPlease write your code using Standard Input, i.e. input() and print().", "input": "3 0\n", "output": "-1\n", "code": "\ndef dfs(v, color):\n    visited[v] = True\n    colors[v] = color\n    for u in graph[v]:\n        if not visited[u]:\n            dfs(u, 3 - color)\n\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nvisited = [False] * n\ncolors = [0] * n\n\nfor i in range(n):\n    if not visited[i]:\n        dfs(i, 1)\n\nif all(colors):\n    print(*colors)\nelse:\n    print(-1)\n", "error_type": "Wrong logic"}]
